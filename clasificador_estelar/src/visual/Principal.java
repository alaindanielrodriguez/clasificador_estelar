/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visual;

import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.TransferHandler;

/**
 *
 * @author alain
 */
public class Principal extends javax.swing.JFrame {
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        
        this.setUndecorated(true);
     
        initComponents();
        
        ImageIcon imageIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagenes/pexels-pixabay-2150.jpg"))); // load the image to a imageIcon
        Image image = imageIcon.getImage(); 
        Image newimg = image.getScaledInstance(jLabelFondo.getWidth(), jLabelFondo.getHeight(), Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);  
        jLabelFondo.setIcon(imageIcon);
        
        this.setLocationRelativeTo(null);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabelFondo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuClasificar = new javax.swing.JMenu();
        jMenuItemIntroducirDatos = new javax.swing.JMenuItem();
        jMenuItemCargarDatosDesdeArchivo = new javax.swing.JMenuItem();
        jMenuInformacion = new javax.swing.JMenu();
        jMenuItemQueEsUnaEstrella = new javax.swing.JMenuItem();
        jMenuItemQueEsUnaGalaxia = new javax.swing.JMenuItem();
        jMenuItemQueEsUnCuasar = new javax.swing.JMenuItem();
        jMenuItemComoSeObtuvoElModelo = new javax.swing.JMenuItem();
        jMenuItemQueEsElCorrimientoAlRojo = new javax.swing.JMenuItem();
        jMenuItemQueEsLaAscensionRecta = new javax.swing.JMenuItem();
        jMenuItemQueEsLaDeclinacion = new javax.swing.JMenuItem();
        jMenuAyuda = new javax.swing.JMenu();
        jMenuItemComoUsar = new javax.swing.JMenuItem();
        jMenuItemAcercaDe = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/icons8-shooting-stars-48.png")).getImage());
        setUndecorated(true);
        setResizable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelFondo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );

        jMenuBar1.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuBar1.setPreferredSize(new java.awt.Dimension(230, 30));

        jMenuClasificar.setText("Clasificar");
        jMenuClasificar.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuClasificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuClasificarActionPerformed(evt);
            }
        });

        jMenuItemIntroducirDatos.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemIntroducirDatos.setText("Introducir datos");
        jMenuItemIntroducirDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemIntroducirDatosActionPerformed(evt);
            }
        });
        jMenuClasificar.add(jMenuItemIntroducirDatos);

        jMenuItemCargarDatosDesdeArchivo.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemCargarDatosDesdeArchivo.setText("Importar desde archivo");
        jMenuItemCargarDatosDesdeArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCargarDatosDesdeArchivoActionPerformed(evt);
            }
        });
        jMenuClasificar.add(jMenuItemCargarDatosDesdeArchivo);

        jMenuBar1.add(jMenuClasificar);

        jMenuInformacion.setText("Información");
        jMenuInformacion.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N

        jMenuItemQueEsUnaEstrella.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemQueEsUnaEstrella.setText("¿Qué es una estrella?");
        jMenuItemQueEsUnaEstrella.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQueEsUnaEstrellaActionPerformed(evt);
            }
        });
        jMenuInformacion.add(jMenuItemQueEsUnaEstrella);

        jMenuItemQueEsUnaGalaxia.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemQueEsUnaGalaxia.setText("¿Qué es una galaxia?");
        jMenuItemQueEsUnaGalaxia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQueEsUnaGalaxiaActionPerformed(evt);
            }
        });
        jMenuInformacion.add(jMenuItemQueEsUnaGalaxia);

        jMenuItemQueEsUnCuasar.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemQueEsUnCuasar.setText("¿Qué es un cuásar?");
        jMenuItemQueEsUnCuasar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQueEsUnCuasarActionPerformed(evt);
            }
        });
        jMenuInformacion.add(jMenuItemQueEsUnCuasar);

        jMenuItemComoSeObtuvoElModelo.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemComoSeObtuvoElModelo.setText("¿Cómo se obtuvo el modelo de clasificación?");
        jMenuItemComoSeObtuvoElModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemComoSeObtuvoElModeloActionPerformed(evt);
            }
        });
        jMenuInformacion.add(jMenuItemComoSeObtuvoElModelo);

        jMenuItemQueEsElCorrimientoAlRojo.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemQueEsElCorrimientoAlRojo.setText("¿Qué es el corrimiento al rojo?");
        jMenuItemQueEsElCorrimientoAlRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQueEsElCorrimientoAlRojoActionPerformed(evt);
            }
        });
        jMenuInformacion.add(jMenuItemQueEsElCorrimientoAlRojo);

        jMenuItemQueEsLaAscensionRecta.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemQueEsLaAscensionRecta.setText("¿Qué es la ascensión recta?");
        jMenuItemQueEsLaAscensionRecta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQueEsLaAscensionRectaActionPerformed(evt);
            }
        });
        jMenuInformacion.add(jMenuItemQueEsLaAscensionRecta);

        jMenuItemQueEsLaDeclinacion.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemQueEsLaDeclinacion.setText("¿Qué es la declinación?");
        jMenuItemQueEsLaDeclinacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQueEsLaDeclinacionActionPerformed(evt);
            }
        });
        jMenuInformacion.add(jMenuItemQueEsLaDeclinacion);

        jMenuBar1.add(jMenuInformacion);

        jMenuAyuda.setText("Ayuda");
        jMenuAyuda.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N

        jMenuItemComoUsar.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemComoUsar.setText("Cómo usar la aplicación");
        jMenuItemComoUsar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemComoUsarActionPerformed(evt);
            }
        });
        jMenuAyuda.add(jMenuItemComoUsar);

        jMenuItemAcercaDe.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItemAcercaDe.setText("Acerca de la aplicación");
        jMenuItemAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAcercaDeActionPerformed(evt);
            }
        });
        jMenuAyuda.add(jMenuItemAcercaDe);

        jMenuBar1.add(jMenuAyuda);

        jMenu1.setText("Cerrar");
        jMenu1.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setFont(new java.awt.Font("Junicode", 0, 18)); // NOI18N
        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemCargarDatosDesdeArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCargarDatosDesdeArchivoActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar ubicación del archivo.");

        int seleccion = fileChooser.showSaveDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();
            String ruta = archivo.getAbsolutePath();

            try {
                
                BufferedReader br = new BufferedReader(new FileReader(archivo));
                
                String linea=br.readLine();
                
                String[] datos = linea.split(",");
                
                IntroducirDatos ventana=new IntroducirDatos(this, true);
                
                ventana.setTextFieldId(datos[0]);
                ventana.setTextFieldAscension(datos[1]);
                ventana.setTextFieldDeclinacion(datos[2]);
                ventana.setTextFieldCorrimiento(datos[3]);
                ventana.setTextFieldUltravioleta(datos[4]);
                ventana.setTextFieldVerde(datos[5]);
                ventana.setTextFieldInfrarrojo(datos[6]);
                ventana.setTextFieldInfrarrojoCercano(datos[7]);
                
                ventana.setLocationRelativeTo(null);
                
                ventana.habilitarAceptarAlCargar();
                ventana.setVisible(true);
                
               
                
            } catch (IOException e) {
               
            }
        }
    }//GEN-LAST:event_jMenuItemCargarDatosDesdeArchivoActionPerformed

    private void jMenuClasificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuClasificarActionPerformed

    }//GEN-LAST:event_jMenuClasificarActionPerformed

    private void jMenuItemIntroducirDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemIntroducirDatosActionPerformed
        intD=new IntroducirDatos(this, true);
        intD.setLocationRelativeTo(null);
        intD.setResizable(false);
        intD.setVisible(true);
    }//GEN-LAST:event_jMenuItemIntroducirDatosActionPerformed

    private void jMenuItemAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAcercaDeActionPerformed
        AcercaDe acerca_de = new AcercaDe(this, true);
        acerca_de.setLocationRelativeTo(null);
        acerca_de.setVisible(true);
    }//GEN-LAST:event_jMenuItemAcercaDeActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItemQueEsUnaEstrellaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQueEsUnaEstrellaActionPerformed
        ImageIcon imageIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagenes/sun.jpg"))); 
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(150, 150, Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);
        
        JOptionPane.showMessageDialog(this, "Una estrella (del latín: stella) es un esferoide \n"
                + "luminoso que mantiene su forma debido a su propia gravedad.\n"
                + "Durante al menos una parte de su vida, una estrella brilla\n"
                + "debido a la fusión termonuclear del hidrógeno en helio en \n"
                + "su núcleo, que libera energía, la cual atraviesa el interior\n"
                + " de la estrella y, después, se irradia hacia el espacio exte-\n"
                + "rior. La estrella más cercana a la Tierra es el Sol. Otras \n"
                + "estrellas son visibles a simple vista desde la Tierra durante\n"
                + "la noche, apareciendo como una diversidad de puntos luminosos\n"
                + "aparentemente fijos en el cielo debido a su inmensa distancia\n"
                + "de la misma. Históricamente las estrellas más prominentes fue-\n"
                + "ron agrupadas en constelaciones y asterismos, y las más brillan-\n"
                + "tes fueron denominadas con nombres propios.", "¿Qué es una estrella?" , JOptionPane.INFORMATION_MESSAGE, imageIcon);
    }//GEN-LAST:event_jMenuItemQueEsUnaEstrellaActionPerformed

    private void jMenuItemQueEsUnaGalaxiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQueEsUnaGalaxiaActionPerformed
                ImageIcon imageIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagenes/galaxy.jpg"))); 
                Image image = imageIcon.getImage();
                Image newimg = image.getScaledInstance(150, 150, Image.SCALE_SMOOTH); // scale it the smooth way  
                imageIcon = new ImageIcon(newimg);

                JOptionPane.showMessageDialog(this, "Una galaxia (del griego γαλαξίας ‘lácteo’) es un\n"
                        + "conjunto de estrellas, nubes de gas, planetas, polvo cósmico, \n"
                        + "materia oscura y energía unidas gravitatoriamente en una es-\n"
                        + "tructura más o menos definida. La cantidad de estrellas que \n"
                        + "forman una galaxia es enorme y varía desde las galaxias ena-\n"
                        + "nas, con 10^7, hasta las galaxias gigantes, con 10^14 estre-\n"
                        + "llas. Formando parte de una galaxia existen subestructuras co-\n"
                        + "mo las nebulosas, los cúmulos estelares y los sistemas estela-\n"
                        + "res múltiples.\n", "¿Qué es un cuásar?", JOptionPane.INFORMATION_MESSAGE, imageIcon);
    }//GEN-LAST:event_jMenuItemQueEsUnaGalaxiaActionPerformed

    private void jMenuItemQueEsUnCuasarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQueEsUnCuasarActionPerformed
        ImageIcon imageIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagenes/quasar.jpg"))); 
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(150, 150, Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);
        
        JOptionPane.showMessageDialog(this, "Un cuásar o quasar (acrónimo de «fuente de ra-\n"
                        + "dio cuasiestelar», traducción del inglés quasi-stellar ra-\n"
                        + "dio source) se define como, bien una galaxia recién nacida\n"
                        + "o bien aquella fuente de energía que se presenta en el agu-\n"
                        + "jero negro del centro de dichas galaxias recién nacidas, ca-\n"
                        + "racterizados por ser una fuente astronómica de energía elec-\n"
                        + "tromagnética, que incluye radiofrecuencias y luz visible.", "¿Qué es una galaxia?", JOptionPane.INFORMATION_MESSAGE, imageIcon);
    
    }//GEN-LAST:event_jMenuItemQueEsUnCuasarActionPerformed

    private void jMenuItemComoSeObtuvoElModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemComoSeObtuvoElModeloActionPerformed
        ImageIcon imageIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagenes/arbol.jpg")));
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(150, 150, Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);    
        
        JOptionPane.showMessageDialog(this, "El modelo clasificador usado por la presente\n"
                + "aplicación se obtuvo mediante el análisis de \"data\n"
                + "mining\" de un conjunto de datos de 100.000 instancias\n"
                + "recopilado por el proyecto Sloan Digital Sky Survey (SDSS).\n"
                + "Usando el software de minería de datos Weka se construyó un\n"
                + "árbol de decisión que predice la clase de los objetos estela-\n"
                + "res sobre la base de un conjunto de sus atributos espectrales.", "¿Cómo se obtuvo el modelo de clasificación?", JOptionPane.INFORMATION_MESSAGE, imageIcon);
    
    }//GEN-LAST:event_jMenuItemComoSeObtuvoElModeloActionPerformed

    private void jMenuItemQueEsElCorrimientoAlRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQueEsElCorrimientoAlRojoActionPerformed
        ImageIcon imageIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagenes/redshift.png")));
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(150, 150, Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);    
        
        JOptionPane.showMessageDialog(this, "En física y astronomía, el corrimiento al rojo, acer-\n"
                + "camiento hacia el rojo o desplazamiento hacia el rojo\n"
                + "(en inglés: redshift) es un fenómeno que ocurre cuando\n"
                + "la radiación electromagnética que se emite o refleja des-\n"
                + "de un objeto, normalmente la luz visible, aparece despla-\n"
                + "zada hacia el rojo al final del espectro electromagnético.\n"
                + "De manera más general, el corrimiento al rojo es definido\n"
                + "como un incremento en la longitud de onda de radiación elec-\n"
                + "tromagnética recibida por un detector comparado con la lon-\n"
                + "gitud de onda emitida por la fuente. ", "¿Qué es el corrimiento al rojo?", JOptionPane.INFORMATION_MESSAGE, imageIcon);
    
    }//GEN-LAST:event_jMenuItemQueEsElCorrimientoAlRojoActionPerformed

    private void jMenuItemQueEsLaAscensionRectaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQueEsLaAscensionRectaActionPerformed
        ImageIcon imageIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagenes/coordenadas.png")));
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(150, 150, Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);    
        
        JOptionPane.showMessageDialog(this, "En astronomía, la ascensión recta es una de las coor-\n"
                + "denadas astronómicas que se utilizan para localizar los as-\n"
                + "tros sobre la esfera celeste, equivalente a la longitud te-\n"
                + "rrestre (coordenada geográfica). La ascensión recta se mide\n"
                + "a partir del punto Aries en horas (una hora igual a 15 gra-\n"
                + "dos), minutos y segundos hacia el Este a lo largo del ecua-\n"
                + "dor celeste. A la circunferencia completa (360º) le correspon-\n"
                + "den 24 horas. El punto Aries (o punto Vernal) está en la posi-\n"
                + "ción del Sol en el equinoccio de primavera o Equinoccio vernal.\n"
                + "El símbolo para la ascensión recta es α.", "¿Qué es la ascensión recta?", JOptionPane.INFORMATION_MESSAGE, imageIcon);
    
    }//GEN-LAST:event_jMenuItemQueEsLaAscensionRectaActionPerformed

    private void jMenuItemQueEsLaDeclinacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQueEsLaDeclinacionActionPerformed
        ImageIcon imageIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/imagenes/declinación.png")));
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(150, 150, Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);    
        
        JOptionPane.showMessageDialog(this, "En astronomía, la declinación (abreviada como\n"
                + "dec. y cuyo símbolo es δ) es uno de los dos án-\n"
                + "gulos que ubican un punto en la esfera celeste\n"
                + "en el sistema de coordenadas ecuatoriales, el otro\n"
                + "es el ascensión recta. El ángulo de declinación es\n"
                + "el ángulo que forma un astro con el ecuador celeste.\n"
                + "La declinación se mide en grados sexagesimales y es\n"
                + "positiva si está al norte del ecuador celeste y nega-\n"
                + "tiva si está al sur. La declinación es comparable a la-\n"
                + "latitud geográfica (que se mide sobre el ecuador terres-\n"
                + "tre).", "¿Qué es la declinación?", JOptionPane.INFORMATION_MESSAGE, imageIcon);
    
    }//GEN-LAST:event_jMenuItemQueEsLaDeclinacionActionPerformed

    private void jMenuItemComoUsarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemComoUsarActionPerformed
        ComoUsar como_usar=new ComoUsar(this, true);
        como_usar.setLocationRelativeTo(null);
        como_usar.setVisible(true);
    }//GEN-LAST:event_jMenuItemComoUsarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    private IntroducirDatos intD;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelFondo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenuAyuda;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuClasificar;
    private javax.swing.JMenu jMenuInformacion;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemAcercaDe;
    private javax.swing.JMenuItem jMenuItemCargarDatosDesdeArchivo;
    private javax.swing.JMenuItem jMenuItemComoSeObtuvoElModelo;
    private javax.swing.JMenuItem jMenuItemComoUsar;
    private javax.swing.JMenuItem jMenuItemIntroducirDatos;
    private javax.swing.JMenuItem jMenuItemQueEsElCorrimientoAlRojo;
    private javax.swing.JMenuItem jMenuItemQueEsLaAscensionRecta;
    private javax.swing.JMenuItem jMenuItemQueEsLaDeclinacion;
    private javax.swing.JMenuItem jMenuItemQueEsUnCuasar;
    private javax.swing.JMenuItem jMenuItemQueEsUnaEstrella;
    private javax.swing.JMenuItem jMenuItemQueEsUnaGalaxia;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
